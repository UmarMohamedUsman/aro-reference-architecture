#!/usr/bin/env bash

SUBSCRIPTIONID='025f66df-d5dd-4a8c-a567-52f157cb8041'
HUBRGNAME='hub-rg'
SPOKERGNAME='spoke-rg'
ARCRGNAME='arc-rg'
AZFW_NAME='azfw'
BASTION_NAME='bastion-hub'
LOCATION='eastus'
AROCLUSTER='ftaarocluster'                 # the name of your ARO cluster
PULLSECRETLOCATION=@/mnt/c/Users/umarm/Downloads/pull-secret.txt
uniqueId=$RANDOM
ACR_NAME='aroacr-'$uniqueId
COSMOSDB_NAME='cosmos-'$uniqueId #needs to be lower case
KV_NAME='keyvault-'$uniqueId
LAWORKSPACE_NAME='ftahacklw'
AFD_NAME='ftahackafd'
AFD_PLS_NAME='ftaaro-pls'
AFD_APP_CUSTOM_DOMAIN_NAME='ratingsapp-vwsazure-com'
ARO_APP_FQDN='ratingsapp.vwsazure.com'


# VNet Name and IP Addresses
HUBVNET_NAME='hub-vnet'
HUBVNET_PREFIX='10.0.0.0/16'
AZFWSUBNET_PREFIX='10.0.0.0/26'
AZUREBASTIONSUBNET_PREFIX='10.0.0.64/26'
VMSUBNET_PREFIX='10.0.1.0/24'
VMSUBNET_NAME=VM-Subnet

SPOKEVNET_NAME='aro-spoke-vnet'
MASTERAROSUBNET_NAME=master-aro-subnet
WORKERAROSUBNET_NAME=worker-aro-subnet
SPOKEVNET_PREFIX='10.1.0.0/16'
MASTERAROSUBNET_PREFIX='10.1.0.0/23'
WORKERAROSUBNET_PREFIX='10.1.2.0/23'
PRIVATERUNNERSUBNET_PREFIX='10.1.4.0/24'
PRIVATERUNNERSUBNET_NAME=PrivateRunner-subnet
APPGWSUBNET_PREFIX='10.1.5.0/27'
APPGWSUBNET_NAME=AppGW-subnet
PRIVATEENDPOINTSUBNET_PREFIX='10.1.6.0/25'
PRIVATEENDPOINTSUBNET_NAME='PrivateEndpoint-subnet'

# 1. creates the resource group
az group create --name $HUBRGNAME --location $LOCATION
az group create --name $SPOKERGNAME --location $LOCATION

# 2. ARO needs minimum of 40 cores, check to make sure your subscription Limit is 40 cores or more
az vm list-usage -l $LOCATION \
--query "[?contains(name.value, 'standardDSv3Family')]" \
-o table

# 3. Register the necessary resource providers
az provider register -n Microsoft.RedHatOpenShift --wait
az provider register -n Microsoft.Compute --wait
az provider register -n Microsoft.Storage --wait
az provider register -n Microsoft.Authorization --wait

# 4. Create virtual network
# 4.1 Create HUB virtual network

# HUB VNet creation
az network vnet create \
   --resource-group $HUBRGNAME \
   --name $HUBVNET_NAME \
   --address-prefixes $HUBVNET_PREFIX

# AzureFirewallSubnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name AzureFirewallSubnet \
  --address-prefixes $AZFWSUBNET_PREFIX

# AzureBastionSubnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name AzureBastionSubnet \
  --address-prefixes $AZUREBASTIONSUBNET_PREFIX

# Tools Box VM-Subnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name $VMSUBNET_NAME \
  --address-prefixes $VMSUBNET_PREFIX

# 4.2 Create SPOKE virtual network
az network vnet create \
   --resource-group $SPOKERGNAME \
   --name $SPOKEVNET_NAME \
   --address-prefixes $SPOKEVNET_PREFIX

# master-aro-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $MASTERAROSUBNET_NAME \
  --address-prefixes $MASTERAROSUBNET_PREFIX \
  --disable-private-link-service-network-policies true

# worker-aro-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $WORKERAROSUBNET_NAME \
  --address-prefixes $WORKERAROSUBNET_PREFIX

# AppGW-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $APPGWSUBNET_NAME \
  --address-prefixes $APPGWSUBNET_PREFIX

# PrivateEndpoint-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $PRIVATEENDPOINTSUBNET_NAME \
  --address-prefixes $PRIVATEENDPOINTSUBNET_PREFIX \
  --disable-private-endpoint-network-policies true

# PrivateRunner-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $PRIVATERUNNERSUBNET_NAME \
  --address-prefixes $PRIVATERUNNERSUBNET_PREFIX

# 4.3 Create Peerings
# Create Peering
SPOKE_VNET_ID=$(az network vnet show --name $SPOKEVNET_NAME --resource-group $SPOKERGNAME --query id -o tsv)
HUB_VNET_ID=$(az network vnet show --name $HUBVNET_NAME --resource-group $HUBRGNAME --query id -o tsv)
az network vnet peering create \
  --resource-group $HUBRGNAME \
  --name $HUBVNET_NAME'To'$SPOKEVNET_NAME \
  --vnet-name $HUBVNET_NAME \
  --remote-vnet $SPOKE_VNET_ID \
  --allow-vnet-access \
  --allow-forwarded-traffic
az network vnet peering create \
  --resource-group $SPOKERGNAME \
  --name $SPOKEVNET_NAME'To'$HUBVNET_NAME \
  --vnet-name $SPOKEVNET_NAME \
  --remote-vnet $HUB_VNET_ID \
  --allow-vnet-access \
  --allow-forwarded-traffic

# 5. Log Analytics Workspace
az monitor log-analytics workspace create \
  --resource-group $HUBRGNAME \
  --name $LAWORKSPACE_NAME
azlaworkspaceId=$(az monitor log-analytics workspace show -g $HUBRGNAME -n $LAWORKSPACE_NAME --query 'id' -o tsv)

# 5. Create Azure Firewall
# AZFW_NAME
az network public-ip create
  --resource-group $HUBRGNAME \
  --name $AZFW_NAME'-pip' \
  --sku standard \
  --allocation-method static \
  --location $LOCATION

azfw_ip=$(az network public-ip show -g $HUBRGNAME -n $AZFW_NAME'-pip' --query ipAddress -o tsv)

az network firewall create \
  --name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --location $LOCATION \
  --enable-dns-proxy true

azfw_id=$(az network firewall show -n $AZFW_NAME -g $HUBRGNAME -o tsv --query id)

az network firewall ip-config create \
  --firewall-name $AZFW_NAME \
  --name azfw-ipconfig \
  --resource-group $HUBRGNAME \
  --public-ip-address $AZFW_NAME'-pip' \
  --vnet-name $HUBVNET_NAME

az network firewall update \
  --name $AZFW_NAME \
  --resource-group $HUBRGNAME

azfw_private_ip=$(az network firewall show -n $AZFW_NAME -g $HUBRGNAME -o tsv --query 'ipConfigurations[0].privateIpAddress')

# 5.1 Create Firewall Rules
# 5.1.1 Create Network Rules
aro_collection_network_rule_name='Aro-required-ports'
az network firewall network-rule create \
  --firewall-name $AZFW_NAME -g $HUBRGNAME \
  --collection-name $aro_collection_network_rule_name \
  --protocols any \
  --destination-addresses '*' \
  --destination-ports 123 \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name NTP \
  --priority 200 \
  --action Allow

# 5.1.2 Create Application Rules
# Minimum Required FQDN / application rules
minimum_required_group_target_fqdns="arosvc.$LOCATION.data.azurecr.io *.quay.io registry.redhat.io mirror.openshift.com api.openshift.com arosvc.azurecr.io management.azure.com login.microsoftonline.com gcs.prod.monitoring.core.windows.net *.blob.core.windows.net *.servicebus.windows.net *.table.core.windows.net"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Minimum-Required-FQDN' \
  --protocols Http=80 Https=443 \
  --target-fqdns $minimum_required_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name minimum_required_group_target_fqdns \
  --priority 200 \
  --action Allow

# FIRST GROUP: INSTALLING AND DOWNLOADING PACKAGES AND TOOLS
aro_collection_app_rule_name='Aro-required-urls'
first_group_target_fqdns="quay.io registry.redhat.io sso.redhat.com openshift.org"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name $aro_collection_app_rule_name \
  --protocols Http=80 Https=443 \
  --target-fqdns $first_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name first_group_target_fqdns \
  --priority 201 \
  --action Allow

# SECOND GROUP: TELEMETRY
second_group_target_fqdns="cert-api.access.redhat.com api.access.redhat.com infogw.api.openshift.com cloud.redhat.com"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Telemetry-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $second_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name second_group_target_fqdns \
  --priority 202 \
  --action Allow

# THIRD GROUP: CLOUD APIs
third_group_target_fqdns="management.azure.com"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Cloud-APIs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $third_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name third_group_target_fqdns \
  --priority 203 \
  --action Allow

# FOURTH GROUP: OTHER OPENSHIFT REQUIREMENTS
# Note: *.apps.<cluster_name>.<base_domain> (OR EQUIVALENT ARO URL): When allowlisting domains, this is use in your corporate network to reach applications deployed in OpenShift, or to access the OpenShift console.
fourth_group_target_fqdns="mirror.openshift.com storage.googleapis.com api.openshift.com registry.access.redhat.com"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'OpenShift-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $fourth_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name fourth_group_target_fqdns \
  --priority 204 \
  --action Allow

# FIFTH GROUP: MICROSOFT & RED HAT ARO MONITORING SERVICE
fifth_group_target_fqdns="login.microsoftonline.com gcs.prod.monitoring.core.windows.net *.blob.core.windows.net *.servicebus.windows.net *.table.core.windows.net"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Monitoring-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $fifth_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name fifth_group_target_fqdns \
  --priority 205 \
  --action Allow

# SIXTH GROUP: ONBOARDING ARO ON TO ARC
sixth_group_target_fqdns="management.azure.com $LOCATION.dp.kubernetesconfiguration.azure.com login.microsoftonline.com login.windows.net mcr.microsoft.com *.data.mcr.microsoft.com gbl.his.arc.azure.com *.his.arc.azure.com *.servicebus.windows.net guestnotificationservice.azure.com *.guestnotificationservice.azure.com sts.windows.net k8connecthelm.azureedge.net"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Arc-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $sixth_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name sixth_group_target_fqdns \
  --priority 206 \
  --action Allow

# SEVENTH GROUP: Azure Monitor Container Insights extension for Arc
seventh_group_target_fqdns="*.ods.opinsights.azure.com *.oms.opinsights.azure.com dc.services.visualstudio.com *.monitoring.azure.com	login.microsoftonline.com"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Arc-ContainerInsights-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $seventh_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name seventh_group_target_fqdns \
  --priority 207 \
  --action Allow

# EIGHTH GROUP: Docker HUB, GCR Optional for testing porpuse
eighth_group_target_fqdns="registry.hub.docker.com *.docker.io production.cloudflare.docker.com auth.docker.io *.gcr.io"
az network firewall application-rule create \
  --firewall-name $AZFW_NAME \
  --resource-group $HUBRGNAME \
  --collection-name 'Docker-HUB-URLs' \
  --protocols Http=80 Https=443 \
  --target-fqdns $eighth_group_target_fqdns \
  --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX \
  --name eighth_group_target_fqdns \
  --priority 208 \
  --action Allow

# Optional additional Azure FQDNs
# target_useful_fqdns="ifconfig.co api.snapcraft.io jsonip.com kubernaut.io motd.ubuntu.com"
# target_azure_fqdns="*.azmk8s.io aksrepos.azurecr.io *.blob.core.windows.net mcr.microsoft.com *.cdn.mscr.io management.azure.com login.microsoftonline.com packages.azure.com acs-mirror.azureedge.net *.opinsights.azure.com *.monitoring.azure.com dc.services.visualstudio.com *.ods.opinsights.azure.com *.oms.opinsights.azure.com cloudflare.docker.com data.policy.core.windows.net store.policy.core.windows.net"
# target_registries_fqdns="$LOCATION.data.mcr.microsoft.com $acr_name.azurecr.io *.gcr.io gcr.io storage.googleapis.com *.docker.io quay.io *.quay.io *.cloudfront.net production.cloudflare.docker.com *.hcp.$location.cx.aks.containerservice.azure.us"
# target_fqdns="grafana.net grafana.com stats.grafana.org github.com raw.githubusercontent.com security.ubuntu.com security.ubuntu.com packages.microsoft.com azure.archive.ubuntu.com security.ubuntu.com hack32003.vault.azure.net *.letsencrypt.org usage.projectcalico.org gov-prod-policy-data.trafficmanager.net vortex.data.microsoft.com"

# 5.5 Add Diagnostic Settings
az monitor diagnostic-settings create -n 'AzFWtoLogAnalytics' \
   --resource $azfw_id \
   --workspace $azlaworkspaceId \
   --logs '[{\"category\":\"AzureFirewallApplicationRule\",\"Enabled\":true}, {\"category\":\"AzureFirewallNetworkRule\",\"Enabled\":true}, {\"category\":\"AzureFirewallDnsProxy\",\"Enabled\":true}]' \
   --metrics '[{\"category\": \"AllMetrics\",\"enabled\": true}]'

# 6. Update VNET DNS IP
az network vnet update \
  --resource-group $HUBRGNAME \
  --name $HUBVNET_NAME \
  --dns-servers $azfw_private_ip
az network vnet update \
  --resource-group $SPOKERGNAME \
  --name $SPOKEVNET_NAME \
  --dns-servers $azfw_private_ip

# 7. Create UDRs
# 7.1 UDR for ARO
ARO_UDR_NAME='aro-udr'
az network route-table create \
  --name $ARO_UDR_NAME \
  --resource-group $HUBRGNAME \
  --location $LOCATION
az network route-table route create \
  --name defaultRoute \
  --route-table-name $ARO_UDR_NAME \
  --resource-group $HUBRGNAME \
  --next-hop-type VirtualAppliance \
  --address-prefix "0.0.0.0/0" \
  --next-hop-ip-address $azfw_private_ip
aro_rt_id=$(az network route-table show -n $ARO_UDR_NAME -g $HUBRGNAME -o tsv --query id)
az network vnet subnet update \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $MASTERAROSUBNET_NAME \
  --route-table $aro_rt_id
az network vnet subnet update \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name $WORKERAROSUBNET_NAME \
  --route-table $aro_rt_id

# 7.2 TODO: UDR for VMs/Toolsbox and PrivateRunner

# 8. Bastion Host
az network public-ip create \
  --resource-group $HUBRGNAME \
  --name $BASTION_NAME'-PIP' \
  --sku Standard \
  --location $LOCATION
az network bastion create \
  --name $BASTION_NAME \
  --public-ip-address $BASTION_NAME'-PIP' \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --location $LOCATION

# 9. Tools Box (for troubleshooting)
az vm create \
  --name 'ToolsBox' \
  --resource-group $HUBRGNAME \
  --image UbuntuLTS \
  --admin-username 'azureuser' \
  --size 'Standard_A2' \
  --vnet-name $HUBVNET_NAME \
  --subnet $VMSUBNET_NAME \
  --generate-ssh-keys

# 9.1 Install tools in the Tools Box VM
az vm run-command invoke \
  --resource-group $HUBRGNAME \
  --name 'ToolsBox' \
  --command-id RunShellScript \
  --scripts "curl -sL https://raw.githubusercontent.com/UmarMohamedUsman/aro-reference-architecture/welasco/deployment/script.sh | sudo bash"

# 10. Supporting Services - ACR, CosmosDB and KeyVault
# 10.1 ACR in Spoke VNET with Private Endpoint
az acr create \
  --resource-group $SPOKERGNAME \
  --name $ACR_NAME \
  --sku Premium \
  --public-network-enabled false \
  --admin-enabled true

az network private-dns zone create \
  --resource-group $SPOKERGNAME \
  --name 'privatelink.azurecr.io'

az network private-dns link vnet create \
  --resource-group $SPOKERGNAME \
  --name 'AcrDNSLink' \
  --zone-name 'privatelink.azurecr.io' \
  --virtual-network $HUB_VNET_ID \
  --registration-enabled false

REGISTRY_ID=$(az acr show -n $ACR_NAME --query 'id' -o tsv)

az network private-endpoint create \
  --name 'acrPvtEndpoint' \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --subnet $PRIVATEENDPOINTSUBNET_NAME \
  --private-connection-resource-id $REGISTRY_ID \
  --group-ids 'registry' \
  --connection-name 'acrConnection'

az network private-endpoint dns-zone-group create \
  --name 'ACR-ZoneGroup' \
  --resource-group $SPOKERGNAME \
  --endpoint-name 'acrPvtEndpoint' \
  --private-dns-zone 'privatelink.azurecr.io' \
  --zone-name 'ACR'

# 10.2 Azure CosmosDB with Private Link
databaseName='database1'
collectionName='collection1'

az cosmosdb create \
  --name $COSMOSDB_NAME \
  --resource-group $SPOKERGNAME \
  --kind MongoDB \
  --server-version '4.0' \
  --enable-public-network false \
  --default-consistency-level Eventual

# Create a MongoDB API database
az cosmosdb mongodb database create \
  --account-name $COSMOSDB_NAME \
  --resource-group $SPOKERGNAME \
  --name $databaseName

# Define the index policy for the collection, with _id, wildcard, compound, unique and TTL
printf '
[
    {
        "key": {"keys": ["_id"]}
    },
    {
        "key": {"keys": ["$**"]}
    },
    {
        "key": {"keys": ["user_id", "user_address"]},
        "options": {"unique": "true"}
    },
    {
        "key": {"keys": ["_ts"]},
        "options": {"expireAfterSeconds": 2629746}
    }
]' > idxpolicy-$uniqueId.json

# Create a MongoDB API collection
az cosmosdb mongodb collection create \
  --account-name $COSMOSDB_NAME \
  --resource-group $SPOKERGNAME \
  --database-name $databaseName \
  --name $collectionName \
  --shard 'user_id' \
  --throughput 400 \
  --idx @idxpolicy-$uniqueId.json

# Clean up temporary index policy file
rm -f "idxpolicy-$uniqueId.json"

COSMOSDB_ID=$(az cosmosdb show -n $COSMOSDB_NAME -g $SPOKERGNAME --query 'id' -o tsv)

# Private Endpoint connection
az network private-endpoint create \
  --name 'cosmosdbPvtEndpoint' \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --subnet $PRIVATEENDPOINTSUBNET_NAME \
  --private-connection-resource-id $COSMOSDB_ID \
  --group-ids 'MongoDB' \
  --connection-name 'cosmosdbConnection'

az network private-dns zone create \
  --resource-group $SPOKERGNAME \
  --name 'privatelink.mongodb.azure.com'

az network private-dns link vnet create \
  --resource-group $SPOKERGNAME \
  --zone-name 'privatelink.mongodb.azure.com' \
  --name 'CosmosDbDNSLink' \
  --virtual-network $HUB_VNET_ID \
  --registration-enabled false

az network private-endpoint dns-zone-group create \
  --resource-group $SPOKERGNAME \
  --name 'CosmosDb-ZoneGroup' \
  --endpoint-name 'cosmosdbPvtEndpoint' \
  --private-dns-zone 'privatelink.mongodb.azure.com' \
  --zone-name 'CosmosDB'

# 10.3 Azure KeyVault with Private Link
az keyvault create -n $KV_NAME -g $SPOKERGNAME -l $LOCATION
az keyvault update -n $KV_NAME -g $SPOKERGNAME --default-action deny # Turn on Key Vault Firewall
KEYVAULT_ID=$(az keyvault show -n $KV_NAME -g $SPOKERGNAME --query 'id' -o tsv)

az network private-dns zone create \
  --resource-group $SPOKERGNAME \
  --name 'privatelink.vaultcore.azure.net'

az network private-dns link vnet create \
  --resource-group $SPOKERGNAME \
  --name 'KeyVaultDNSLink' \
  --zone-name 'privatelink.vaultcore.azure.net' \
  --virtual-network $HUB_VNET_ID \
  --registration-enabled true

az network private-endpoint create \
  --name 'kvPvtEndpoint' \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --subnet $PRIVATEENDPOINTSUBNET_NAME \
  --private-connection-resource-id $KEYVAULT_ID \
  --group-ids 'vault' \
  --connection-name 'kvConnection'

az network private-endpoint dns-zone-group create \
  --name 'KeyVault-ZoneGroup' \
  --resource-group $SPOKERGNAME \
  --endpoint-name 'kvPvtEndpoint' \
  --private-dns-zone 'privatelink.vaultcore.azure.net' \
  --zone-name 'KEYVAULT'

# 11. Create private ARO cluster
az aro create \
  --resource-group $SPOKERGNAME \
  --name $AROCLUSTER \
  --vnet $SPOKEVNET_NAME \
  --master-subnet $MASTERAROSUBNET_NAME \
  --worker-subnet $WORKERAROSUBNET_NAME \
  --apiserver-visibility Private \
  --ingress-visibility Private \
  --pull-secret $PULLSECRETLOCATION
  # --domain foo.example.com # [OPTIONAL] custom domain

# 12. Create Azure Front Door
aro_rgName='aro-'$(az aro show -n $AROCLUSTER -g $SPOKERGNAME --query "clusterProfile.domain" -o tsv)
internal_LbName=$(az network lb list --resource-group $aro_rgName --query "[? contains(name, 'internal')].name" -o tsv)
worker_subnetId=$(az network vnet subnet show -n $WORKERAROSUBNET_NAME -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME --query "id" -o tsv)
lbconfig_id=$(az network lb frontend-ip list -g $aro_rgName --lb-name $internal_LbName --query "[? contains(subnet.id, 'worker')].id" -o tsv)
lbconfig_ip=$(az network lb frontend-ip list -g $aro_rgName --lb-name $internal_LbName --query "[? contains(subnet.id, 'worker')].privateIpAddress" -o tsv)

az network private-link-service create \
  --name $AFD_PLS_NAME \
  --resource-group $SPOKERGNAME \
  --private-ip-address-version IPv4 \
  --private-ip-allocation-method Dynamic \
  --vnet-name $SPOKEVNET_NAME \
  --subnet $WORKERAROSUBNET_NAME \
  --lb-frontend-ip-configs $lbconfig_id

privatelink_id=$(az network private-link-service show -n $AFD_PLS_NAME -g $SPOKERGNAME --query 'id' -o tsv)

az afd profile create \
  --resource-group $SPOKERGNAME \
  --profile-name $AFD_NAME \
  --sku Premium_AzureFrontDoor

afd_id=$(az afd profile show -g $SPOKERGNAME --profile-name $AFD_NAME --query 'id' -o tsv)

az monitor diagnostic-settings create \
  --name 'AfdtoLogAnalytics' \
  --resource $afd_id \
  --workspace $azlaworkspaceId \
  --logs '[{"category":"FrontDoorAccessLog","Enabled":true}, {"category":"FrontDoorHealthProbeLog","Enabled":true}, {"category":"FrontDoorWebApplicationFirewallLog","Enabled":true}]' \
  --metrics '[{"category": "AllMetrics","enabled": true}]'

az afd endpoint create \
  --resource-group $SPOKERGNAME \
  --origin-response-timeout-seconds 60 \
  --enabled-state Enabled \
  --endpoint-name 'aro-ilb' \
  --profile-name $AFD_NAME

az afd origin-group create \
  --origin-group-name 'afdorigin' \
  --probe-path '/' \
  --probe-protocol Http \
  --probe-request-type GET \
  --probe-interval-in-seconds 100 \
  --profile-name $AFD_NAME \
  --resource-group $SPOKERGNAME \
  --probe-interval-in-seconds 120 \
  --sample-size 4 \
  --successful-samples-required 3 \
  --additional-latency-in-milliseconds 50

az afd origin create \
  --enable-private-link true \
  --private-link-resource $privatelink_id \
  --private-link-location $LOCATION \
  --private-link-request-message 'Private link service from AFD' \
  --weight 1000 \
  --priority 1 \
  --http-port 80 \
  --https-port 443 \
  --origin-group-name 'afdorigin' \
  --enabled-state Enabled \
  --host-name $lbconfig_ip \
  #--origin-host-header $ARO_APP_FQDN \
  --origin-name 'afdorigin' \
  --profile-name $AFD_NAME \
  --resource-group $SPOKERGNAME

privatelink_pe_id=$(az network private-link-service show -n $AFD_PLS_NAME -g $SPOKERGNAME --query 'privateEndpointConnections[0].privateEndpoint.id' -o tsv)

# Currently there is a bug in Az CLI that is unable to approve a Private Endpoint in a Private Link Service
# Bug Link: https://github.com/Azure/azure-cli/issues/19908
az network private-endpoint-connection approve \
  --description 'Approved' \
  --id $privatelink_pe_id

az afd custom-domain create \
  --certificate-type ManagedCertificate \
  --custom-domain-name $AFD_APP_CUSTOM_DOMAIN_NAME \
  --host-name $ARO_APP_FQDN \
  --minimum-tls-version TLS12 \
  --profile-name $AFD_NAME \
  --resource-group $SPOKERGNAME

az afd custom-domain show \
  --resource-group $SPOKERGNAME \
  --profile-name $AFD_NAME \
  --custom-domain-name $AFD_APP_CUSTOM_DOMAIN_NAME \
  --query "validationProperties"

# Now you have validate your domain. You must create a TXT Record using this name: _dnsauth.ratingsapp.vwsazure.com usgin validationToken as value. This process will take some time to finish the verification.
# To check if the DNS was created in the expected run NSLOOKUP: nslookup -q=TXT _dnsauth.$ARO_APP_FQDN
# This validarion process will take some time

az afd route create \
  --endpoint-name 'aro-ilb' \
  --forwarding-protocol HttpOnly \
  --https-redirect Disabled \
  --origin-group 'afdorigin' \
  --profile-name $AFD_NAME \
  --resource-group $SPOKERGNAME \
  --route-name 'aro-route' \
  --supported-protocols Http Https \
  --patterns-to-match '/*' \
  --custom-domains $AFD_APP_CUSTOM_DOMAIN_NAME

# 13. Connect to ARO cluster
AROCLUSTERPWD=$(az aro list-credentials --name $AROCLUSTER --resource-group $SPOKERGNAME --query 'kubeadminPassword' -o tsv)

# 14. Find the ARO cluster console URL and browse using your browser
az aro show \
    --name $AROCLUSTER \
    --resource-group $SPOKERGNAME \
    --query "consoleProfile.url" -o tsv

# 15 Azure Login
az login
az account set -s $SUBSCRIPTIONID

# Connect using the OpenShift CLI
apiServer=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query apiserverProfile.url -o tsv)

# 16. Login to the OpenShift cluster's API server
oc login $apiServer -u kubeadmin -p $AROCLUSTERPWD

# 17. To display all namespaces
oc get ns

# 18. Integrate ACR with OC
ACRPWD=$(az acr credential show -n $ACR_NAME --query 'passwords[0].value' -o tsv)

oc create secret docker-registry \
    --docker-server=$ACR_NAME.azurecr.io \
    --docker-username=$ACR_NAME \
    --docker-password=$ACRPWD \
    --docker-email=unused \
    acr-secret

# 19. Integrate keyvault
helm repo add csi-secrets-store-provider-azure https://raw.githubusercontent.com/Azure/secrets-store-csi-driver-provider-azure/master/charts
helm install csi csi-secrets-store-provider-azure/csi-secrets-store-provider-azure

# Create a service principal to access keyvault
SERVICE_PRINCIPAL_NAME="http://fta-aro-akv-sp"
SERVICE_PRINCIPAL_CLIENT_SECRET="$(az ad sp create-for-rbac --skip-assignment --appId $SERVICE_PRINCIPAL_NAME --query 'password' -otsv)"
SERVICE_PRINCIPAL_CLIENT_ID="$(az ad sp show --id $SERVICE_PRINCIPAL_NAME --query 'appId' -otsv)"

az keyvault set-policy -n $KV_NAME --secret-permissions get --spn ${SERVICE_PRINCIPAL_CLIENT_ID}

# Create OC Secret
oc create secret generic secrets-store-creds --from-literal clientid=${SERVICE_PRINCIPAL_CLIENT_ID} --from-literal clientsecret=${SERVICE_PRINCIPAL_CLIENT_SECRET}
oc label secret secrets-store-creds secrets-store.csi.k8s.io/used=true

# Create Keyvault Secret
# Get the Connection string for cosmos db and replace $COSMOSDB_URI_CONNECTIONSTRING
COSMOSDB_URI_CONNECTIONSTRING=''
az keyvault secret set --vault-name ${KV_NAME} --name 'mongodburi' --value $COSMOSDB_URI_CONNECTIONSTRING

# Deploy Secret Provider Class
TENANT_ID=$(az account show --query tenantId -o tsv)

cat <<EOF | oc apply -f -
apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
kind: SecretProviderClass
metadata:
  name: azure-kvname
  namespace: default
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    userAssignedIdentityID: ""
    keyvaultName: "${KV_NAME}"
    objects: |
      array:
        - |
          objectName: mongodburi
          objectType: secret
          objectVersion: ""
    tenantId: "${TENANT_ID}"
EOF

# Test by running busybox
cat <<EOF | oc apply -f -
kind: Pod
apiVersion: v1
metadata:
  name: busybox-secrets-store-inline
spec:
  containers:
  - name: busybox
    image: k8s.gcr.io/e2e-test-images/busybox:1.29
    command:
      - "/bin/sleep"
      - "10000"
    volumeMounts:
    - name: secrets-store-inline
      mountPath: "/mnt/secrets-store"
      readOnly: true
  volumes:
    - name: secrets-store-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "azure-kvname"
        nodePublishSecretRef:                       # Only required when using service principal mode
          name: secrets-store-creds                 # Only required when using service principal mode
EOF

# Test the secrets
oc exec busybox-secrets-store-inline -- ls /mnt/secrets-store/

oc exec busybox-secrets-store-inline -- cat /mnt/secrets-store/mongodburi

# ***** AAD Integration Begin ***********
# AAD Integration for RBAC: https://docs.microsoft.com/en-us/azure/openshift/configure-azure-ad-cli
domain=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query clusterProfile.domain -o tsv)
location=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query location -o tsv)
apiServer=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query apiserverProfile.url -o tsv)
webConsole=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query consoleProfile.url -o tsv)

oauthCallbackURL=https://oauth-openshift.apps.$domain.$location.aroapp.io/oauth2callback/AAD
# Generate a random number for client secret
let randomNum=$RANDOM*$RANDOM*$RANDOM
client_secret=FTAaro@Hack$randomNum

# Create an Azure Active Directory application and retrieve the created application identifier.
app_id=$(az ad app create \
  --query appId -o tsv \
  --display-name fta-aro-auth \
  --reply-urls $oauthCallbackURL \
  --password $client_secret)

# Retrieve the tenant ID of the subscription that owns the application.
tenant_id=$(az account show --query tenantId -o tsv)

# Create a manifest.json file to configure the Azure Active Directory application.
cat > manifest.json<< EOF
[{
  "name": "upn",
  "source": null,
  "essential": false,
  "additionalProperties": []
},
{
"name": "email",
  "source": null,
  "essential": false,
  "additionalProperties": []
}]
EOF

# Update the Azure Active Directory application's optionalClaims with a manifest
az ad app update \
  --set optionalClaims.idToken=@manifest.json \
  --id $app_id

# Add permission for the Azure Active Directory Graph.User.Read scope to enable sign in and read user profile.
az ad app permission add \
 --api 00000002-0000-0000-c000-000000000000 \
 --api-permissions 311a71cc-e848-46a1-bdf8-97ff7156d8e6=Scope \
 --id $app_id

# Retrieve the kubeadmin credentials. Run the following command to find the password for the kubeadmin user.
kubeadmin_password=$(az aro list-credentials --name $AROCLUSTER --resource-group $SPOKERGNAME --query kubeadminPassword --output tsv)

# Log in to the OpenShift cluster's API server using the following command.
oc login $apiServer -u kubeadmin -p $kubeadmin_password

# Create an OpenShift secret to store the Azure Active Directory application secret.
oc create secret generic openid-client-secret-azuread --namespace openshift-config --from-literal=clientSecret=$client_secret

cat > oidc.yaml<< EOF
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: AAD
    mappingMethod: claim
    type: OpenID
    openID:
      clientID: $app_id
      clientSecret:
        name: openid-client-secret-azuread
      extraScopes:
      - email
      - profile
      extraAuthorizeParameters:
        include_granted_scopes: "true"
      claims:
        preferredUsername:
        - email
        - upn
        name:
        - name
        email:
        - email
      issuer: https://login.microsoftonline.com/$tenant_id
EOF

# Apply the configuration to the cluster.
oc apply -f oidc.yaml

# Add rolebinding to AAD user
# Example: oc create clusterrolebinding umarm-cluster-admin-role --clusterrole=cluster-admin --user=umarm@microsoft.com
oc create clusterrolebinding <alias-cluster-admin-role> --clusterrole=cluster-admin --user=<AAD User Principal Name>

# ***** AAD Integration End ***********

# 18. add a policy to enable arc
oc adm policy add-scc-to-user privileged system:serviceaccount:azure-arc:azure-arc-kube-aad-proxy-sa

# 19. enable arc
az connectedk8s connect --name $AROCLUSTER --resource-group $SPOKERGNAME --location $LOCATION

# 20. verify
az connectedk8s list --resource-group $SPOKERGNAME --output table

# 21. Deploy workload on toolsbox for testing
git clone https://github.com/MicrosoftDocs/mslearn-aks-workshop-ratings-api.git

git clone https://github.com/MicrosoftDocs/mslearn-aks-workshop-ratings-web.git

sudo az acr login -n aroacrhackthon

cd mslearn-aks-workshop-ratings-api
sudo docker build . -t aroacrhackthon.azurecr.io/ratings-api:v1
sudo docker push aroacrhackthon.azurecr.io/ratings-api:v1
cd ..

cd mslearn-aks-workshop-ratings-web
sudo docker build . -t aroacrhackthon.azurecr.io/ratings-web:v1
sudo docker push aroacrhackthon.azurecr.io/ratings-web:v1
