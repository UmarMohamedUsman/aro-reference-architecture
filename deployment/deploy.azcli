#!/usr/bin/env bash

SUBSCRIPTIONID='025f66df-d5dd-4a8c-a567-52f157cb8041'
HUBRGNAME='hub-rg'
SPOKERGNAME='spoke-rg'
ARCRGNAME='arc-rg'
AZFW_NAME='azfw'
BASTION_NAME='bastion-hub'
LOCATION='westus'
AROCLUSTER='ftaarocluster'                 # the name of your ARO cluster
PULLSECRETLOCATION=@/mnt/c/Users/umarm/Downloads/pull-secret.txt
uniqueId=$RANDOM
ACR_NAME='aroacr-'$uniqueId
COSMOSDB_NAME='cosmos-'$uniqueId #needs to be lower case
KV_NAME='keyvault-'$uniqueId

# VNet Name and IP Addresses
HUBVNET_NAME='hub-vnet'
HUBVNET_PREFIX='10.0.0.0/16'
AZFWSUBNET_PREFIX='10.0.0.0/26'
AZUREBASTIONSUBNET_PREFIX='10.0.0.64/26'
VMSUBNET_PREFIX='10.0.1.0/24'

SPOKEVNET_NAME='aro-spoke-vnet'
SPOKEVNET_PREFIX='10.1.0.0/16'
MASTERAROSUBNET_PREFIX='10.1.0.0/23'
WORKERAROSUBNET_PREFIX='10.1.2.0/23'
PRIVATERUNNERSUBNET_PREFIX='10.1.4.0/24'
APPGWSUBNET_PREFIX='10.1.5.0/27'
PRIVATEENDPOINTSUBNET_PREFIX='10.1.6.0/25'

# 1. creates the resource group
az group create --name $HUBRGNAME --location $LOCATION
az group create --name $SPOKERGNAME --location $LOCATION

# 2. ARO needs minimum of 40 cores, check to make sure your subscription Limit is 40 cores or more
az vm list-usage -l $LOCATION \
--query "[?contains(name.value, 'standardDSv3Family')]" \
-o table

# 3. Register the necessary resource providers
az provider register -n Microsoft.RedHatOpenShift --wait
az provider register -n Microsoft.Compute --wait
az provider register -n Microsoft.Storage --wait
az provider register -n Microsoft.Authorization --wait

# 4. Create virtual network
# 4.1 Create HUB virtual network

# HUB VNet creation
az network vnet create \
   --resource-group $HUBRGNAME \
   --name $HUBVNET_NAME \
   --address-prefixes $HUBVNET_PREFIX

# AzureFirewallSubnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name AzureFirewallSubnet \
  --address-prefixes $AZFWSUBNET_PREFIX

# AzureBastionSubnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name AzureBastionSubnet \
  --address-prefixes $AZUREBASTIONSUBNET_PREFIX

# Tools Box VM-Subnet
az network vnet subnet create \
  --resource-group $HUBRGNAME \
  --vnet-name $HUBVNET_NAME \
  --name VM-Subnet \
  --address-prefixes $VMSUBNET_PREFIX

# 4.2 Create SPOKE virtual network
az network vnet create \
   --resource-group $SPOKERGNAME \
   --name $SPOKEVNET_NAME \
   --address-prefixes $SPOKEVNET_PREFIX

# master-aro-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name master-aro-subnet \
  --address-prefixes $MASTERAROSUBNET_PREFIX \
  --disable-private-link-service-network-policies true

# worker-aro-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name worker-aro-subnet \
  --address-prefixes $WORKERAROSUBNET_PREFIX

# AppGW-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name AppGW-subnet \
  --address-prefixes $APPGWSUBNET_PREFIX

# PrivateEndpoint-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name PrivateEndpoint-subnet \
  --address-prefixes $PRIVATEENDPOINTSUBNET_PREFIX \
  --disable-private-endpoint-network-policies true

# PrivateRunner-subnet
az network vnet subnet create \
  --resource-group $SPOKERGNAME \
  --vnet-name $SPOKEVNET_NAME \
  --name PrivateRunner-subnet \
  --address-prefixes $PRIVATERUNNERSUBNET_PREFIX

# 4.3 Create Peerings
# Create Peering
SPOKE_VNET_ID=$(az network vnet show --name $SPOKEVNET_NAME --resource-group $SPOKERGNAME --query id -o tsv)
HUB_VNET_ID=$(az network vnet show --name $HUBVNET_NAME --resource-group $HUBRGNAME --query id -o tsv)
az network vnet peering create -g $HUBRGNAME -n $HUBVNET_NAME'To'$SPOKEVNET_NAME --vnet-name $HUBVNET_NAME --remote-vnet $SPOKE_VNET_ID --allow-vnet-access --allow-forwarded-traffic
az network vnet peering create -g $SPOKERGNAME -n $SPOKEVNET_NAME'To'$HUBVNET_NAME --vnet-name $SPOKEVNET_NAME --remote-vnet $HUB_VNET_ID --allow-vnet-access --allow-forwarded-traffic

# 5. Create Azure Firewall
# AZFW_NAME
az network public-ip create -g $HUBRGNAME -n $AZFW_NAME'-pip' --sku standard --allocation-method static -l $LOCATION
azfw_ip=$(az network public-ip show -g $HUBRGNAME -n $AZFW_NAME'-pip' --query ipAddress -o tsv)
az network firewall create -n $AZFW_NAME -g $HUBRGNAME -l $LOCATION --enable-dns-proxy true
azfw_id=$(az network firewall show -n $AZFW_NAME -g $HUBRGNAME -o tsv --query id)
az network firewall ip-config create -f $AZFW_NAME -n azfw-ipconfig -g $HUBRGNAME --public-ip-address $AZFW_NAME'-pip' --vnet-name $HUBVNET_NAME
az network firewall update -n $AZFW_NAME -g $HUBRGNAME
azfw_private_ip=$(az network firewall show -n $AZFW_NAME -g $HUBRGNAME -o tsv --query 'ipConfigurations[0].privateIpAddress')

# 5.1 Create Firewall Rules
# 5.1.1 Create Network Rules
aro_collection_network_rule_name='Aro-required-ports'
az network firewall network-rule create -f $AZFW_NAME -g $HUBRGNAME -c $aro_collection_network_rule_name \
    --protocols any --destination-addresses '*' --destination-ports 123 --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n NTP --priority 200 --action Allow

# 5.1.2 Create Application Rules
# Minimum Required FQDN / application rules
minimum_required_group_target_fqdns="arosvc.$LOCATION.data.azurecr.io *.quay.io registry.redhat.io mirror.openshift.com api.openshift.com arosvc.azurecr.io management.azure.com login.microsoftonline.com gcs.prod.monitoring.core.windows.net *.blob.core.windows.net *.servicebus.windows.net *.table.core.windows.net"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c 'Minimum-Required-FQDN' \
    --protocols Http=80 Https=443 --target-fqdns $minimum_required_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n minimum_required_group_target_fqdns --priority 200 --action Allow

# FIRST GROUP: INSTALLING AND DOWNLOADING PACKAGES AND TOOLS
aro_collection_app_rule_name='Aro-required-urls'
first_group_target_fqdns="quay.io registry.redhat.io sso.redhat.com openshift.org"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c $aro_collection_app_rule_name \
    --protocols Http=80 Https=443 --target-fqdns $first_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n first_group_target_fqdns --priority 201 --action Allow

# SECOND GROUP: TELEMETRY
second_group_target_fqdns="cert-api.access.redhat.com api.access.redhat.com infogw.api.openshift.com cloud.redhat.com"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c 'Telemetry-URLs' \
    --protocols Http=80 Https=443 --target-fqdns $second_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n second_group_target_fqdns --priority 202 --action Allow

# THIRD GROUP: CLOUD APIs
third_group_target_fqdns="management.azure.com"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c 'Cloud-APIs' \
    --protocols Http=80 Https=443 --target-fqdns $third_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n third_group_target_fqdns --priority 203 --action Allow

# FOURTH GROUP: OTHER OPENSHIFT REQUIREMENTS
# Note: *.apps.<cluster_name>.<base_domain> (OR EQUIVALENT ARO URL): When allowlisting domains, this is use in your corporate network to reach applications deployed in OpenShift, or to access the OpenShift console.
fourth_group_target_fqdns="mirror.openshift.com storage.googleapis.com api.openshift.com registry.access.redhat.com"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c 'OpenShift-URLs' \
    --protocols Http=80 Https=443 --target-fqdns $fourth_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n fourth_group_target_fqdns --priority 204 --action Allow

# FIFTH GROUP: MICROSOFT & RED HAT ARO MONITORING SERVICE
fifth_group_target_fqdns="login.microsoftonline.com gcs.prod.monitoring.core.windows.net *.blob.core.windows.net *.servicebus.windows.net *.table.core.windows.net"
az network firewall application-rule create -f $AZFW_NAME -g $HUBRGNAME -c 'Monitoring-URLs' \
    --protocols Http=80 Https=443 --target-fqdns $fifth_group_target_fqdns --source-addresses $HUBVNET_PREFIX $SPOKEVNET_PREFIX -n fifth_group_target_fqdns --priority 205 --action Allow

# Optional additional Azure FQDNs
# target_useful_fqdns="ifconfig.co api.snapcraft.io jsonip.com kubernaut.io motd.ubuntu.com"
# target_azure_fqdns="*.azmk8s.io aksrepos.azurecr.io *.blob.core.windows.net mcr.microsoft.com *.cdn.mscr.io management.azure.com login.microsoftonline.com packages.azure.com acs-mirror.azureedge.net *.opinsights.azure.com *.monitoring.azure.com dc.services.visualstudio.com *.ods.opinsights.azure.com *.oms.opinsights.azure.com cloudflare.docker.com data.policy.core.windows.net store.policy.core.windows.net"
# target_registries_fqdns="$LOCATION.data.mcr.microsoft.com $acr_name.azurecr.io *.gcr.io gcr.io storage.googleapis.com *.docker.io quay.io *.quay.io *.cloudfront.net production.cloudflare.docker.com *.hcp.$location.cx.aks.containerservice.azure.us"
# target_fqdns="grafana.net grafana.com stats.grafana.org github.com raw.githubusercontent.com security.ubuntu.com security.ubuntu.com packages.microsoft.com azure.archive.ubuntu.com security.ubuntu.com hack32003.vault.azure.net *.letsencrypt.org usage.projectcalico.org gov-prod-policy-data.trafficmanager.net vortex.data.microsoft.com"

# 6. Update VNET DNS IP
az network vnet update -g $HUBRGNAME -n $HUBVNET_NAME --dns-servers $azfw_private_ip
az network vnet update -g $SPOKERGNAME -n $SPOKEVNET_NAME --dns-servers $azfw_private_ip

# 7. Create UDRs
# 7.1 UDR for ARO
ARO_UDR_NAME='aro-udr'
az network route-table create -n $ARO_UDR_NAME -g $HUBRGNAME -l $LOCATION
az network route-table route create -n defaultRoute --route-table-name $ARO_UDR_NAME -g $HUBRGNAME \
    --next-hop-type VirtualAppliance --address-prefix "0.0.0.0/0" --next-hop-ip-address $azfw_private_ip
aro_rt_id=$(az network route-table show -n $ARO_UDR_NAME -g $HUBRGNAME -o tsv --query id)
az network vnet subnet update -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME -n master-aro-subnet --route-table $aro_rt_id
az network vnet subnet update -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME -n worker-aro-subnet --route-table $aro_rt_id

# 7.2 TODO: UDR for VMs/Toolsbox and PrivateRunner

# 8. Bastion Host
az network public-ip create -g $HUBRGNAME -n $BASTION_NAME'-PIP' --sku Standard --location $LOCATION
az network bastion create --name $BASTION_NAME --public-ip-address $BASTION_NAME'-PIP' -g $HUBRGNAME --vnet-name $HUBVNET_NAME --location $LOCATION

# 9. Tools Box (for troubleshooting)
az vm create \
  --name 'ToolsBox' \
  --resource-group $HUBRGNAME \
  --image UbuntuLTS \
  --admin-username 'azureuser' \
  --size 'Standard_A2' \
  --vnet-name $HUBVNET_NAME \
  --subnet VM-Subnet \
  --generate-ssh-keys

# 9.1 Install tools in the Tools Box VM
az vm run-command invoke \
  --resource-group $HUBRGNAME \
  --name 'ToolsBox' \
  --command-id RunShellScript \
  --scripts "curl -sL https://raw.githubusercontent.com/UmarMohamedUsman/aro-reference-architecture/welasco/deployment/script.sh | sudo bash"

# 10. Supporting Services - ACR, CosmosDB and KeyVault
# 10.1 ACR in Spoke VNET with Private Endpoint
az acr create -g $SPOKERGNAME -n $ACR_NAME --sku Premium --public-network-enabled false --admin-enabled true

az network private-dns zone create -g $SPOKERGNAME -n 'privatelink.azurecr.io'

az network private-dns link vnet create -g $SPOKERGNAME -n 'AcrDNSLink' --zone-name 'privatelink.azurecr.io' --virtual-network $HUB_VNET_ID --registration-enabled false

REGISTRY_ID=$(az acr show -n $ACR_NAME --query 'id' -o tsv)

az network private-endpoint create -n 'acrPvtEndpoint' -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME --subnet 'PrivateEndpoint-subnet' --private-connection-resource-id $REGISTRY_ID --group-ids 'registry' --connection-name 'acrConnection'

az network private-endpoint dns-zone-group create -n 'ACR-ZoneGroup' -g $SPOKERGNAME --endpoint-name 'acrPvtEndpoint' --private-dns-zone 'privatelink.azurecr.io' --zone-name 'ACR'

# 10.2 Azure CosmosDB with Private Link
databaseName='database1'
collectionName='collection1'

az cosmosdb create -n $COSMOSDB_NAME -g $SPOKERGNAME --kind MongoDB --server-version '4.0' --enable-public-network false --default-consistency-level Eventual

# Create a MongoDB API database
az cosmosdb mongodb database create -a $COSMOSDB_NAME -g $SPOKERGNAME -n $databaseName

# Define the index policy for the collection, with _id, wildcard, compound, unique and TTL
printf '
[
    {
        "key": {"keys": ["_id"]}
    },
    {
        "key": {"keys": ["$**"]}
    },
    {
        "key": {"keys": ["user_id", "user_address"]},
        "options": {"unique": "true"}
    },
    {
        "key": {"keys": ["_ts"]},
        "options": {"expireAfterSeconds": 2629746}
    }
]' > idxpolicy-$uniqueId.json

# Create a MongoDB API collection
az cosmosdb mongodb collection create -a $COSMOSDB_NAME -g $SPOKERGNAME -d $databaseName -n $collectionName --shard 'user_id' --throughput 400 --idx @idxpolicy-$uniqueId.json

# Clean up temporary index policy file
rm -f "idxpolicy-$uniqueId.json"

COSMOSDB_ID=$(az cosmosdb show -n $COSMOSDB_NAME -g $SPOKERGNAME --query 'id' -o tsv)

# Private Endpoint connection
az network private-endpoint create -n 'cosmosdbPvtEndpoint' -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME --subnet 'PrivateEndpoint-subnet' --private-connection-resource-id $COSMOSDB_ID --group-ids 'MongoDB' --connection-name 'cosmosdbConnection'

az network private-dns zone create -g $SPOKERGNAME -n 'privatelink.mongodb.azure.com'

az network private-dns link vnet create --resource-group $SPOKERGNAME --zone-name 'privatelink.mongodb.azure.com' -n 'CosmosDbDNSLink' --virtual-network $HUB_VNET_ID --registration-enabled false

az network private-endpoint dns-zone-group create -g $SPOKERGNAME -n 'CosmosDb-ZoneGroup' --endpoint-name 'cosmosdbPvtEndpoint' --private-dns-zone 'privatelink.mongodb.azure.com' --zone-name 'CosmosDB'

# 10.2 Azure KeyVault with Private Link
az keyvault create -n $KV_NAME -g $SPOKERGNAME -l $LOCATION
az keyvault update -n $KV_NAME -g $SPOKERGNAME --default-action deny # Turn on Key Vault Firewall
KEYVAULT_ID=$(az keyvault show -n $KV_NAME -g $SPOKERGNAME --query 'id' -o tsv)

az network private-dns zone create -g $SPOKERGNAME -n 'privatelink.vaultcore.azure.net'

az network private-dns link vnet create -g $SPOKERGNAME -n 'KeyVaultDNSLink' --zone-name 'privatelink.vaultcore.azure.net' --virtual-network $HUB_VNET_ID --registration-enabled true

az network private-endpoint create -n 'kvPvtEndpoint' -g $SPOKERGNAME --vnet-name $SPOKEVNET_NAME --subnet 'PrivateEndpoint-subnet' --private-connection-resource-id $KEYVAULT_ID --group-ids 'vault' --connection-name 'kvConnection'

az network private-endpoint dns-zone-group create -n 'KeyVault-ZoneGroup' -g $SPOKERGNAME --endpoint-name 'kvPvtEndpoint' --private-dns-zone 'privatelink.vaultcore.azure.net' --zone-name 'KEYVAULT'

# 11. Create Azure Application Gateway
# APPGW_NAME=aro-app-gw
# APPGW_SKU=WAF_v2
# az network public-ip create \
#   --resource-group $SPOKERGNAME \
#   --name $APPGW_NAME'-pip' \
#   --sku Standard \
#   -l $LOCATION
# appgw_ip=$(az network public-ip show -g $SPOKERGNAME -n $APPGW_NAME --query ipAddress -o tsv)
# az network application-gateway create -g $SPOKERGNAME -n $APPGW_NAME -l $LOCATION \
#           --capacity 2 --sku $APPGW_SKU --frontend-port 80 \
#           --routing-rule-type basic --http-settings-port 80 \
#           --http-settings-protocol Http --public-ip-address $APPGW_NAME'-pip' \
#           --vnet-name $SPOKEVNET_NAME --subnet AppGW-subnet \
#           --servers "dummy.abc.com" --no-wait

# 12. Create private ARO cluster
az aro create \
  --resource-group $SPOKERGNAME \
  --name $AROCLUSTER \
  --vnet $SPOKEVNET_NAME \
  --master-subnet master-aro-subnet \
  --worker-subnet worker-aro-subnet \
  --apiserver-visibility Private \
  --ingress-visibility Private \
  --pull-secret $PULLSECRETLOCATION
  # --domain foo.example.com # [OPTIONAL] custom domain

# 13. Connect to ARO cluster
AROCLUSTERPWD=$(az aro list-credentials --name $AROCLUSTER --resource-group $SPOKERGNAME --query 'kubeadminPassword' -o tsv)

# 14. Find the ARO cluster console URL and browse using your browser
az aro show \
    --name $AROCLUSTER \
    --resource-group $SPOKERGNAME \
    --query "consoleProfile.url" -o tsv

# 15 Azure Login
az login
az account set -s $SUBSCRIPTIONID

# Connect using the OpenShift CLI
apiServer=$(az aro show -g $SPOKERGNAME -n $AROCLUSTER --query apiserverProfile.url -o tsv)

# 16. Login to the OpenShift cluster's API server
oc login $apiServer -u kubeadmin -p $AROCLUSTERPWD

# 17. To display all namespaces
oc get ns

# 18. add a policy to enable arc
oc adm policy add-scc-to-user privileged system:serviceaccount:azure-arc:azure-arc-kube-aad-proxy-sa

# 19. enable arc
az connectedk8s connect --name $AROCLUSTER --resource-group $SPOKERGNAME --location $LOCATION

# 20. verify
az connectedk8s list --resource-group $SPOKERGNAME --output table